* ENV install
** Docker
   Please refer to the link for docker install for rasp
   #+BEGIN_SRC
$ curl -sSL https://get.docker.com | sh
$ sudo usermod -aG docker pi
$ docker version 
Client: Docker Engine - Community
 Version:           26.1.4
 API version:       1.45
 Go version:        go1.21.11
 Git commit:        5650f9b
 Built:             Wed Jun  5 11:29:11 2024
 OS/Arch:           linux/arm64
 Context:           default

Server: Docker Engine - Community
 Engine:
  Version:          26.1.4
  API version:      1.45 (minimum version 1.24)
  Go version:       go1.21.11
  Git commit:       de5c9cf
  Built:            Wed Jun  5 11:29:11 2024
  OS/Arch:          linux/arm64
  Experimental:     false
 containerd:
  Version:          1.6.33
  GitCommit:        d2d58213f83a351ca8f528a95fbd145f5654e957
 runc:
  Version:          1.1.12
  GitCommit:        v1.1.12-0-g51d5e94
 docker-init:
  Version:          0.19.0
  GitCommit:        de40ad0

$ sudo more /etc/docker/daemon.json
{
  "data-root": "/DATA/docker"
}
   #+END_SRC

** docker composer
   #+BEGIN_SRC
$ sudo pip3 install docker-compose
$ docker-compose --version
docker-compose version 1.29.2, build unknown
   #+END_SRC
** kubernetes on raspberry
   https://alexsniffin.medium.com/a-guide-to-building-a-kubernetes-cluster-with-raspberry-pis-23fa4938d420
** upgrade raspbian to raspberry OS PI
   https://www.makeuseof.com/tag/raspberry-pi-update-raspbian-os/
To determine the version of Raspberry Pi OS (formerly Raspbian) you're using and upgrade to the latest version, follow these steps:

### 1. **Check the Current Raspberry Pi OS Version**
   You can check your current version of Raspberry Pi OS by running the following command:
   ```bash
   cat /etc/os-release
   ```

   This should display information about your current OS version. Look for something like:
   ```
   NAME="Raspberry Pi OS"
   VERSION="10 (Buster)"
   VERSION_ID="10"
   ID=debian
   ID_LIKE=debian
   ```

   The `VERSION` and `VERSION_ID` fields will tell you which version of Raspberry Pi OS you are currently using (e.g., Buster, Bullseye).

### 2. **Update and Upgrade the System**
   If you're using an older version of Raspberry Pi OS and want to upgrade to the latest version (e.g., from Buster to Bullseye or the latest release), you can follow these steps:

#### a. **Update Current System**
   Before upgrading to the latest version, ensure that your system is fully updated. Open a terminal and run the following commands:

   ```bash
   sudo apt update
   sudo apt upgrade -y
   sudo apt dist-upgrade -y
   sudo apt autoremove -y
   ```

   This will ensure that all existing packages are up to date.

#### b. **Change the APT Sources (If Required)**
   If you want to upgrade to a newer version (like Bullseye from Buster), you'll need to update the APT repository URLs in your `/etc/apt/sources.list` and any files in `/etc/apt/sources.list.d/` to point to the new release.

   - Open the `/etc/apt/sources.list` file:
     ```bash
     sudo nano /etc/apt/sources.list
     ```

   - Update the release name in the `deb` lines. For example, change references from `buster` to `bullseye`:
     From:
     ```bash
     deb http://archive.raspberrypi.org/debian/ buster main
     ```
     To:
     ```bash
     deb http://archive.raspberrypi.org/debian/ bullseye main
     ```

   - If you have any additional repository files in `/etc/apt/sources.list.d/`, make sure to update those as well to point to the new release.

#### c. **Update the GPG Key**
   Ensure that you have the correct GPG key for the new version:
   ```bash
   curl -fsSL https://archive.raspberrypi.org/debian/raspberrypi.gpg | sudo tee /etc/apt/trusted.gpg.d/raspberrypi.asc > /dev/null
   ```

#### d. **Perform the Distribution Upgrade**
   After updating the repository URLs and ensuring the correct GPG key is in place, run the following commands to upgrade to the new release:
   ```bash
   sudo apt update
   sudo apt full-upgrade -y
   ```

   This will upgrade your Raspberry Pi OS to the latest version available in the repository (e.g., Bullseye).

### 3. **Reboot the Raspberry Pi**
   Once the upgrade process completes, reboot your Raspberry Pi to apply the changes:
   ```bash
   sudo reboot
   ```

### 4. **Verify the New Version**
   After rebooting, verify that the upgrade was successful by checking the OS version again:
   ```bash
   cat /etc/os-release
   ```

   This should show the new version of Raspberry Pi OS (e.g., Bullseye or the latest release).

### Notes:
- **Backup**: Always create a backup of your system before performing an upgrade, especially when upgrading between major versions (e.g., Buster to Bullseye).
- **Compatibility**: Some older packages or software may not be compatible with the newer version of Raspberry Pi OS, so it's always a good idea to check compatibility before upgrading.

By following these steps, you can determine your current Raspberry Pi OS version and upgrade to the latest release.




   
+ cat /etc/os-release
#+BEGIN_SRC
#+END_SRC
   sudo rm /etc/apt/trusted.gpg.d/raspberrypi.gpg
curl -fsSL https://archive.raspberrypi.org/debian/raspberrypi.gpg | sudo tee /etc/apt/trusted.gpg.d/raspberrypi.asc > /dev/null

sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 9165938D90FDDD2E

Change the google as below:
#+BEGIN_SRC
deb https://packages.cloud.google.com/apt cloud-sdk main 
#+END_SRC

** Nodejs
   #+BEGIN_SRC
curl -fsSL https://deb.nodesource.com/setup_current.x | sudo -E bash -
   #+END_SRC
** golang
   #+BEGIN_SRC
$ wget https://go.dev/dl/go1.23.5.linux-armv6l.tar.gz
$ sudo tar -C /usr/local -xzf go1.23.5.linux-armv6l.tar.gz
$ tail -n 2 ~/.bashrc 
export PATH=$PATH:/usr/local/go/bin
   #+END_SRC
** raspberry boot from ssd
   https://www.raspberrystreet.com/learn/how-to-boot-raspberrypi-from-usb-ssd
** deepseek
   #+BEGIN_SRC
$ curl -fsSL https://ollama.com/install.sh | sh
$ export    
$ ollama run deepseek-r1:7b
   #+END_SRC

** airflow
*** Install
   #+BEGIN_SRC
$ sudo pip3 install -U pip
$ sudo python3 -m pip install pendulum
$ pip3 install apache-airflow 
   #+END_SRC
*** Disable examples
    #+BEGIN_SRC
AIRFLOW__CORE__LOAD_EXAMPLES = "false"
    #+END_SRC
*** Add redirect to airflow
- nginx config
    #+BEGIN_SRC
  location /myorg/airflow/ {
      proxy_pass http://localhost:8080;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
  }

  location /myorg/flower/ {
      proxy_pass http://localhost:5555;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
  }
    #+END_SRC
- env

    #+BEGIN_SRC
  environment:
    AIRFLOW__WEBSERVER__BASE_URL: 'https://www.51yomo.net/luyomo/airflow'
    AIRFLOW__WEBSERVER__WEB_SERVER_BASE_URL: 'https://www.51yomo.net/luyomo/airflow'
    AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: 'true'
    AIRFLOW__WEBSERVER__PROXY_FIX_X_FOR: 1
    AIRFLOW__WEBSERVER__PROXY_FIX_X_PROTO: 1
    AIRFLOW__WEBSERVER__PROXY_FIX_X_HOST: 3
    AIRFLOW__WEBSERVER__PROXY_FIX_X_PORT: 1
    AIRFLOW__WEBSERVER__PROXY_FIX_X_PREFIX: 1
    AIRFLOW__CELERY__FLOWER_URL_PREFIX: '/luyomo/flower'
    #+END_SRC
*** Custom authentication
** opencv
   #+BEGIN_SRC
$ sudo apt update
$ sudo apt install build-essential cmake git pkg-config libjpeg-dev libtiff-dev libpng-dev libjasper-dev libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libxvidcore-dev libx264-dev libgtk-3-dev libcanberra-gtk-module libatlas-base-dev gfortran python3-dev python3-numpy
$ git clone https://github.com/opencv/opencv.git
$ cd opencv
$ git checkout 4.x  # Checkout the OpenCV 4 branch
$ cd ..
$ git clone https://github.com/opencv/opencv_contrib.git
$ cd opencv_contrib
$ git checkout 4.x
$ cd ../opencv
$ mkdir build
$ cd build

$ cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_EXAMPLES=OFF  -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules ..
$ make -j$(nproc)  # Replace $(nproc) with the number of CPU cores you want to use
$ sudo make install
$ python3 -c "import cv2; print(cv2.__version__)"
4.6.0
   #+END_SRC
*** gocv
    #+BEGIN_SRC
$ go get -u -d gocv.io/x/gocv
$ 
    #+END_SRC
** tesseract
*** Install
    Install the [[https://notesalexp.org/tesseract-ocr/packages5/en/debian/buster/armhf/tesseract-ocr/][tesseract]] from the guide
    #+BEGIN_SRC
$ export TESSDATA_PREFIX=/usr/local/share/tessdata
    #+END_SRC
   #+BEGIN_SRC
$ apt-get install tesseract-ocr libtesseract-dev

   #+END_SRC
*** Leptonica install
    #+BEGIN_SRC
$ sudo apt install build-essential cmake libpng-dev libjpeg-dev libtiff-dev zlib1g-dev
$ git clone https://github.com/DanBloomberg/leptonica.git
$ cd leptonica
$ mkdir build
$ cd build
$ cmake ..
$ make
$ sudo make install
    #+END_SRC
** paddleocr
   #+BEGIN_SRC
$ pip install paddleocr paddlepaddle
$ apt-get install libglib2.0
$ apt-get install libgl1
   #+END_SRC
** pihole
   #+BEGIN_SRC
pi@c1s04:~/workspace/pihole $ docker --version 
Docker version 20.10.6, build 370c289
pi@c1s04:~/workspace/pihole $ docker-compose --version 
Docker Compose version v2.33.0
pi@rasp$~workspace/pihole $ more docker-compose.yaml
services:                                                                                                                                                                     [0/185]
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    restart: unless-stopped
    network_mode: "host"  # Use "bridge" if you want to specify ports manually
    environment:
      TZ: "Asia/Tokyo"
      WEBPASSWORD: "yourpassword"  # Change this to set a Pi-hole admin password
      DNS1: "1.1.1.1"  # Upstream DNS (Cloudflare)
      DNS2: "8.8.8.8"
    volumes:
      - './etc-pihole:/etc/pihole'
      - './etc-dnsmasq:/etc/dnsmasq.d'
    cap_add:
      - NET_ADMIN
   #+END_SRC
** crash router
   #+BEGIN_SRC
pi$ more docker-composer.yml
service:
  clash:
    image: dreamacro/clash:latest
    container_name: clash-proxy
    restart: unless-stopped
    #    ports:
    #      - "7890:7890"   # HTTP Proxy
    #      - "7891:7891"   # SOCKS5 Proxy
    #      - "9090:9090"   # Web UI (optional)
    #      - "7892:7892"   # Transparent Proxy (redir mode)
    volumes:
      - ./config:/root/.config/clash  # Mount config directory
    network_mode: "host"
    environment:
      - TZ=Asia/Tokyo  # Set timezone (change as needed)
   #+END_SRC
* Comparison between modal
- Standard D16lds v5 (16 vcpus, 32 GiB memory)
  + deepseek-r1:7b (4GB)
    + CPU:80%
  + deepseel-r1:14b (9GB)
    + I am prepare some english sentences for my daughter who is 14 years old. Could you generate 5 english sentences using word employ?
      + CPU: 80%
  + deepseel-r1:32b (19GB)
    + I am prepare some english sentences for my daughter who is 14 years old. Could you generate 5 english sentences using word employ?
      + CPU:90%
      + I feel that the performance is slower than the previous model. From my perspectivem it's not acceptable now.6
- Standard D32lds v5 (32 vcpus, 64 GiB memory)
  + deepseek-r1:32b (19GB)
    + I am prepare some english sentences for my daughter who is 14 years old. Could you generate 5 english sentences using word employ?
      + CPU:90%
      + Faster than the original model. But it's still slow and I am able to feel it,
    + Now I am learning the wso2am. Could you give me some recommendations how to deploy it using kubernetes.
      + CPU: 80%
      + It's very slow to get the response. I took more than two minutes to complete the questions.
- g4dn.8xlarge
  + deepseek-r1:32b (19GB)
    + I am prepare some english sentences for my daughter who is 14 years old. Could you generate 5 english sentences using word employ?

  + ollama run deepseek-r1:70b(62GB)
    + I am prepare some english sentences for my daughter who is 14 years old. Could you generate 5 english sentences using word employ?
      + Pretty slow. It's not acceptable to use this level.
- g4dn.12xlarge
